# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2017-09-06 14:40
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import eventtools.models
import location_field.models.plain
import recurrence.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BasicEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=500)),
                ('date', models.DateTimeField(verbose_name='event date')),
                ('recurrences', recurrence.fields.RecurrenceField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ComplexEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, eventtools.models.OccurrenceMixin),
        ),
        migrations.CreateModel(
            name='MyOccurrence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField(db_index=True)),
                ('end', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('repeat', eventtools.models.ChoiceTextField(blank=True, choices=[('RRULE:FREQ=DAILY', 'Daily'), ('RRULE:FREQ=WEEKLY', 'Weekly'), ('RRULE:FREQ=MONTHLY', 'Monthly'), ('RRULE:FREQ=YEARLY', 'Yearly')], default='')),
                ('repeat_until', models.DateField(blank=True, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.ComplexEvent')),
            ],
            options={
                'abstract': False,
                'ordering': ('start', 'end'),
            },
            bases=(models.Model, eventtools.models.OccurrenceMixin),
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('address', models.CharField(help_text='Map will update as you type, other fields update on save', max_length=255)),
                ('location', location_field.models.plain.PlainLocationField(help_text="Don't touch this", max_length=63, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=20, max_digits=24, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=20, max_digits=24, null=True)),
                ('formatted_address', models.CharField(blank=True, max_length=255)),
                ('country', models.CharField(blank=True, max_length=255)),
                ('administrative_area_level_1', models.CharField(blank=True, max_length=255)),
                ('administrative_area_level_2', models.CharField(blank=True, max_length=255)),
                ('administrative_area_level_3', models.CharField(blank=True, max_length=255)),
                ('locality', models.CharField(blank=True, max_length=255)),
                ('sublocality_level_1', models.CharField(blank=True, max_length=255)),
                ('sublocality_level_2', models.CharField(blank=True, max_length=255)),
                ('neighborhood', models.CharField(blank=True, max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Show',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
            ],
        ),
    ]
